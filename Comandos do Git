Comandos do Git e do GitHub, divididos por categorias:  

---

## ğŸ”¹ **ConfiguraÃ§Ã£o Inicial**  
Estes comandos sÃ£o usados para configurar o Git na sua mÃ¡quina:  
- `git config --global user.name "Seu Nome"` â†’ Define o nome do usuÃ¡rio globalmente.  
- `git config --global user.email "seu@email.com"` â†’ Define o e-mail globalmente.  
- `git config --global core.editor "vim"` â†’ Define o editor de texto padrÃ£o.  
- `git config --list` â†’ Exibe as configuraÃ§Ãµes atuais do Git.  

---

## ğŸ”¹ **InicializaÃ§Ã£o e Clone**  
Comandos usados para iniciar um repositÃ³rio ou clonar um existente:  
- `git init` â†’ Inicializa um novo repositÃ³rio Git no diretÃ³rio atual.  
- `git clone URL_DO_REPOSITORIO` â†’ Clona um repositÃ³rio remoto para sua mÃ¡quina.  

---

## ğŸ”¹ **Status e HistÃ³rico**  
Para visualizar informaÃ§Ãµes sobre mudanÃ§as no repositÃ³rio:  
- `git status` â†’ Mostra o status atual do repositÃ³rio.  
- `git log` â†’ Exibe o histÃ³rico de commits.  
- `git log --oneline` â†’ Exibe o histÃ³rico de commits de forma resumida.  
- `git log --graph --oneline --decorate` â†’ Mostra o histÃ³rico em formato grÃ¡fico.  
- `git show COMMIT_ID` â†’ Mostra detalhes de um commit especÃ­fico.  

---

## ğŸ”¹ **Rastreamento de Arquivos**  
Gerencia quais arquivos serÃ£o monitorados pelo Git:  
- `git add NOME_DO_ARQUIVO` â†’ Adiciona um arquivo especÃ­fico Ã  Ã¡rea de stage.  
- `git add .` â†’ Adiciona todas as alteraÃ§Ãµes para serem commitadas.  
- `git reset NOME_DO_ARQUIVO` â†’ Remove um arquivo da Ã¡rea de stage.  
- `git reset --hard` â†’ Descarta todas as mudanÃ§as desde o Ãºltimo commit.  

---

## ğŸ”¹ **Commits**  
Comandos usados para salvar alteraÃ§Ãµes no repositÃ³rio:  
- `git commit -m "mensagem"` â†’ Cria um commit com a mensagem especificada.  
- `git commit --amend -m "nova mensagem"` â†’ Modifica o Ãºltimo commit.  

---

## ğŸ”¹ **Branches (RamificaÃ§Ãµes)**  
Para gerenciar diferentes versÃµes do cÃ³digo:  
- `git branch` â†’ Lista as branches no repositÃ³rio.  
- `git branch NOME_DA_BRANCH` â†’ Cria uma nova branch.  
- `git checkout NOME_DA_BRANCH` â†’ Troca para a branch especificada.  
- `git checkout -b NOME_DA_BRANCH` â†’ Cria e troca para a nova branch.  
- `git merge NOME_DA_BRANCH` â†’ Mescla outra branch na branch atual.  
- `git branch -d NOME_DA_BRANCH` â†’ Deleta uma branch localmente.  

---

## ğŸ”¹ **RepositÃ³rios Remotos (GitHub, GitLab, etc.)**  
Conecta e sincroniza o repositÃ³rio local com um repositÃ³rio remoto:  
- `git remote add origin URL` â†’ Associa um repositÃ³rio remoto ao repositÃ³rio local.  
- `git remote -v` â†’ Lista os repositÃ³rios remotos vinculados.  
- `git push origin main` â†’ Envia os commits locais para o repositÃ³rio remoto.  
- `git push -u origin main` â†’ Envia commits e define a branch remota como padrÃ£o.  
- `git pull origin main` â†’ Atualiza o repositÃ³rio local com as mudanÃ§as remotas.  

---

## ğŸ”¹ **Revertendo AlteraÃ§Ãµes**  
Para desfazer ou modificar mudanÃ§as:  
- `git revert COMMIT_ID` â†’ Cria um novo commit que desfaz as mudanÃ§as do commit especificado.  
- `git reset --soft COMMIT_ID` â†’ Retorna a um commit especÃ­fico, mantendo as alteraÃ§Ãµes.  
- `git reset --hard COMMIT_ID` â†’ Retorna a um commit especÃ­fico, descartando todas as mudanÃ§as.  

---

## ğŸ”¹ **Git Stash (Salvar AlteraÃ§Ãµes Temporariamente)**  
Para salvar mudanÃ§as temporariamente sem commitÃ¡-las:  
- `git stash` â†’ Salva as mudanÃ§as atuais sem commitÃ¡-las.  
- `git stash list` â†’ Lista os stashes salvos.  
- `git stash apply` â†’ Aplica as mudanÃ§as salvas no stash mais recente.  
- `git stash drop` â†’ Remove o stash mais recente.  

---

## ğŸ”¹ **Tags (MarcaÃ§Ã£o de VersÃµes)**  
Para marcar versÃµes especÃ­ficas do cÃ³digo:  
- `git tag` â†’ Lista todas as tags.  
- `git tag -a v1.0 -m "VersÃ£o 1.0"` â†’ Cria uma nova tag anotada.  
- `git push origin --tags` â†’ Envia as tags para o repositÃ³rio remoto.  

---

## ğŸ”¹ **GitHub - Comandos EspecÃ­ficos**  
Algumas operaÃ§Ãµes Ãºteis no GitHub:  
- `gh repo create` â†’ Cria um novo repositÃ³rio no GitHub.  
- `gh repo clone USUARIO/REPO` â†’ Clona um repositÃ³rio do GitHub.  
- `gh pr create` â†’ Cria um novo Pull Request no GitHub.  
- `gh pr list` â†’ Lista os Pull Requests abertos.  

---